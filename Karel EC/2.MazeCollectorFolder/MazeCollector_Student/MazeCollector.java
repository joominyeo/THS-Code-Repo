import kareltherobot.*;
import java.awt.Color;

/**
 * Write a description of class MazeCollector here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class MazeCollector extends Robot
{
    public MazeCollector(int st, int ave, Direction dir, int num)
    {
        super(st, ave, dir, num);
    }

    public void task()
    {
        moveF(2);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnLeft();
        moveF(4);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        moveF(7);
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnRight();
        moveF(2);
        pickBeeper();
        turnA();
        moveF(5);
        turnRight();
        moveF(5);
        pickBeeper();
        turnLeft();
        turnLeft();
        moveF(5);
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        moveF(7);
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        moveF(4);
        turnLeft();
        moveF(5);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        moveF(2);
        pickBeeper();
        turnA();
        moveF(2);
        turnRight();
        move();
        turnLeft();
        moveF(4);
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        moveF(11);
        turnLeft();
        moveF(4);
        turnRight();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        moveF(2);
        turnRight();
        moveF(3);
        pickBeeper();
        turnA();
        moveF(3);
        turnLeft();
        moveF(2);
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(2);
        pickBeeper();
        turnA();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnRight();
        moveF(2);
        turnRight();
        moveF(8);
        turnRight();
        moveF(7);
        turnLeft();
        moveF(2);
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        moveF(5);
        pickBeeper();
        turnA();
        moveF(5);
        turnRight();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        moveF(11);
        turnLeft();
        moveF(2);
        turnLeft();
        moveF(6);
        turnLeft();
        move();
        turnLeft();
        moveF(5);
        pickBeeper();
        turnA();
        moveF(5);
        turnRight();
        move();
        turnRight();
        moveF(6);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnLeft();
        moveF(5);
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        pickBeeper();
        turnLeft();
        moveF(2);
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        moveF(2);
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnRight();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        moveF(2);
        turnRight();
        moveF(3);
        turnRight();
        moveF(4);
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        moveF(2);
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        moveF(6);
        turnRight();
        move();
        turnRight();
        moveF(5);
        turnLeft();
        moveF(2);
        turnRight();
        moveF(7);
        turnLeft();
        moveF(12);
        pickBeeper();
        turnA();
        moveF(12);
        turnRight();
        moveF(7);
        turnRight();
        move();
        turnRight();
        moveF(6);
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        pickBeeper();
        turnA();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnRight();
        moveF(6);
        turnRight();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnLeft();
        moveF(6);
        turnRight();
        move();
        turnRight();
        moveF(5);
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        pickBeeper();
        turnA();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        moveF(3);
        turnRight();
        moveF(2);
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        moveF(2);
        turnLeft();
        moveF(3);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(4);
        turnLeft();
        moveF(4);
        pickBeeper();
        turnA();
        moveF(8);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(4);
        turnLeft();
        move();
        turnRight();
        moveF(4);
        turnRight();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(4);
        turnRight();
        move();
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        moveF(6);
        pickBeeper();
        turnLeft();
        move();
        turnLeft();
        moveF(8);
        turnRight();
        move();
        turnRight();
        moveF(12);
        turnLeft();
        move();
        turnRight();
        moveF(4);
        turnLeft();
        move();
        turnLeft();
        moveF(5);
        turnLeft();
        move();
        turnRight();
        moveF(6);
        turnRight();
        move();
        turnRight();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        moveF(9);
        turnRight();
        move();
        turnRight();
        moveF(8);
        pickBeeper();
        turnA();
        moveF(8);
        turnLeft();
        move();
        turnLeft();
        moveF(9);
        turnLeft();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        moveF(2);
        turnLeft();
        moveF(2);
        turnRight();
        move();
        turnRight();
        moveF(3);
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        turnLeft();
        move();
        turnRight();
        move();
        pickBeeper();
        turnRight();
        moveF(7);
        turnRight();
        moveF(2);
        pickBeeper();
        turnA();
        moveF(2);
        turnRight();
        moveF(12);
        pickBeeper();
        turnRight();
        moveF(3);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnRight();
        moveF(8);
        pickBeeper();
        turnA();
        moveF(8);
        turnLeft();
        moveF(6);
        turnLeft();
        move();
        turnLeft();
        moveF(2);
        turnRight();
        moveF(3);
        pickBeeper();
        turnA();
        moveF(3);
        turnRight();
        moveF(3);
        turnRight();
        moveF(3);
        turnRight();
        move();
        turnRight();
        moveF(2);
        turnLeft();
        move();
        turnLeft();
        moveF(3);
        turnLeft();
        moveF(2);
        turnRight();
        moveF(3);
        pickA(9);
        move();
        putBeeperRest();
        turnLeft();
        moveF(2);
    }
    //public void task()
    //{
        //exitmaze();
    //}
    public void turnRight()
    {
        turnLeft();
        turnLeft();
        turnLeft();
    }
    public void moveF(int distance)
    {
           for (int x=1; x<=distance; x++)
           {
               move();
           }
    }
    public void pickA(int num)
    {
        for (int x=1; x<=num; x++)
        {
            pickBeeper();
        }
    }
    public void putA(int num)
    {
        for (int x=1; x<=(num); x++)
        {
            putBeeper();
        }
    }
    public void turnA()
    {
        turnLeft();
        turnLeft();
    }
    public void checking()
    {
        if (!frontIsClear())
        {
            turnRight();
        }
        if (!frontIsClear())
        {
            turnA();
        }
        while (frontIsClear())
        {
            move();
        }
    }
    public void exitmaze()
    {
        while (2==2)
        {
            rightNew1();
        }
    }
    public void checkright()
    {
       while (frontIsClear())
        {
           move();
        }
        if (frontIsClear())
        {
            turnLeft();
            move();
            
       }
       if (!frontIsClear())
        {
            turnLeft();
            if (!frontIsClear())
            {
                turnA();
                if (frontIsClear())
                {
                    while (frontIsClear())
                    {
                        move();
                    }
                }
            }
            if (!frontIsClear())
            {
                while (frontIsClear())
                {
                    move();
                }
            }
        }
       }
    public void rightNew1()
    {
        if (frontIsClear())
        {
            turnRight();
            if (frontIsClear())
            {
                move();
                rightNew2();
            }
            if (!frontIsClear())
            {
                turnA();
                rightNew2();
            }
        }
        if (!frontIsClear())
        {
            turnRight();
            if (frontIsClear())
            {
                move();
                rightNew2();
            }
            if (!frontIsClear())
            {
                turnA();
                rightNew2();
            }
        }
    }
    public void rightNew2()
    {
        if (frontIsClear())
        {
            turnRight();
            if (frontIsClear())
            {
                move();
                rightNew1();
            }
            if (!frontIsClear())
            {
                turnA();
                rightNew1();
            }
        }
        if (!frontIsClear())
        {
            turnRight();
            if (frontIsClear())
            {
                move();
                rightNew1();
            }
            if (!frontIsClear())
            {
                turnA();
                rightNew1();
            }
        }
    }
    public void putBeeperRest()
    {
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
        putBeeper();
    }
}